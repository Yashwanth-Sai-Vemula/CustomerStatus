public enum ApplicationStatusCode
    {
        ApplicationReceived = 185,
        IncompleteApplication = 190,
        LNVerificationFailed = 195,
        LNVerified = 200,
        CallPending = 205,
        WaitingForDocuments = 210,
        WorkDetailsCompleted = 211,
        PersonalDetailsCompleted = 212,
        IncomeDetailsCompleted = 213,
        BankDetailsCompleted = 214,
        OnlineCustomerInSupervisorRequest = 215,
        Archive = 216,
        OnlineInReview = 217,
        OnlineInSupervisorReview = 218,
        DocumentCompleted = 219,
        AccountCreated = 220,
        NeedMoreInfo = 230,
        SendToStore = 240,
        VANeedMoreInfo = 250,
        LNAuthFailed = 260,
        LNAuthSuccess = 270,
        DebitCardDetailsCompleted = 280,
        InVerification = 290,
        Declined = 300,
        ApprovedPendingSignature = 320,
        Withdrawn = 310,
        Originated = 330,
        AutoWithdrawal = 340,
        LoanClose = 350,
        FSVerificationAccepted = 501,
        RBLVerificationAccepted = 502,
        RBLVerificationDeclined = 503,
        RBLLoanInitiated = 504,
        RBLAgreementsAccepted = 505,
        RBLLoanDisbursed = 506,
        RBLLoanClosed = 507
    }

    public enum CustomerStatusCode : short
    {
        Active = 10,
        InActive = 20,
        InVerification = 30,
        Accepted = 40,
        AgentNotAssigned = 50,
      NotAccepted = 60,
      RequestToSupervisor = 70,
      Bankrupt = 80,
      Deceased = 90,
      Ageing = 100,
      Blocked = 110,
      NeedMoreInfo = 120,
      VerificationInProcess = 130,
      VerificationDiscard = 140,
      NeedMoreInfoSupervisor = 150,
      AssignToAgent = 160,
      InfoRespondedToAgent = 170,
      InfoRespondedToSupervisor = 180,
      ApplicationReceived = 185,
      IncompleteApplication = 190,
        LNVerificationFailed = 195,
        LNVerified = 200,
        CallPending = 205,
        WaitingForDocuments = 210,
        WorkDetailsCompleted = 211,
        PersonalDetailsCompleted = 212,
        IncomeDetailsCompleted = 213,
        BankDetailsCompleted = 214,
        OnlineCustomerInSupervisorRequest = 215,
        Archive = 216,
        OnlineInReview = 217,
        OnlineInSupervisorReview = 218,
    //}




    /* public async Task<List<int>> getFirstandLastIDs()
       {
           var currentDateMinusHours = 0;
           var Ids = new List<int>();
           string query1 = @$"DECLARE @EndDate DATETIME;
                               DECLARE @StartDate DATETIME;

                               SET @EndDate = DATEADD(HOUR, -{currentDateMinusHours}, GETDATE());
                               SET @StartDate = DATEADD(HOUR, -1, @EndDate);

                               SELECT 
                                   MIN(CustomerHistoryID) AS EarliestCustomerHistoryID,
                                   MAX(CustomerHistoryID) AS LatestCustomerHistoryID
                               FROM 
                                   CustomerHistory
                               WHERE 
                                   InsertedDate BETWEEN @StartDate AND @EndDate;
           ";
           using (SqlConnection connection = new SqlConnection(_connectionString))
           {
               SqlCommand cmd = new SqlCommand(query1, connection);
               connection.Open();
               cmd.CommandTimeout = 120;
               using (SqlDataReader reader = cmd.ExecuteReader())
               {
                   while (reader.Read())
                   {
                       if (!reader.IsDBNull(0))
                       {
                           Ids.Add(reader.GetInt32(0));
                       }
                       else
                       {
                           Console.WriteLine("No data is present at the time of given duartion So the last one hour data of the displayed");
                           Ids = await GetTableLastOneHourData();
                           break;
                       }

                       if (!reader.IsDBNull(1))
                       {
                           Ids.Add(reader.GetInt32(1));
                       }
                   }
               }
           }

           return Ids;
       } */
        /*public async Task<List<int>> GetTableLastOneHourData()
            {
                var IDs = new List<int>();
                string query1 = @"
                DECLARE @LastInsertedDate DATETIME;
                DECLARE @OneHourAgo DATETIME;
                SET @LastInsertedDate = (SELECT MAX(InsertedDate) FROM CustomerHistory);
                SET @OneHourAgo = DATEADD(HOUR, -1, @LastInsertedDate);

                SELECT 
                    MIN(CustomerHistoryID) AS EarliestCustomerHistoryID,
                    MAX(CustomerHistoryID) AS LatestCustomerHistoryID
                FROM 
                    CustomerHistory
                WHERE 
                    InsertedDate BETWEEN @OneHoueAgo AND @LastInsertedDate;
                ";
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    SqlCommand cmd = new SqlCommand(query1, connection);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(0))
                            {
                                IDs.Add(reader.GetInt32(0));
                            }
                            if (!reader.IsDBNull(1))
                            {
                                IDs.Add(reader.GetInt32(1));
                            }
                        }
                    }
                }
                return IDs;
            }*/




     public async Task<List<int>> getCustomerIds(List<int> Ids)
        {
            var customerIds = new List<int>();
            string query = @"
                    SELECT DISTINCT CustomerID
                    FROM CustomerHistory
                    WHERE CustomerHistoryID >= @StartId AND CustomerHistoryID <= @EndId;
            ";

            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@StartId", Ids[0]);
                    command.Parameters.AddWithValue("@EndId", Ids[1]);
                    connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            int customerId = reader.GetInt32(0);
                            customerIds.Add(customerId);
                        }
                    }
                };
            }
            foreach(var id in customerIds)
            {
                Console.WriteLine(id);
            }
            return customerIds;
        }










        @using CustomerStatus.Model;
@model List<Customer>;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customer Status</h2>

<div class="container">
    <div class="chart-container" style="width:100%; height:100vh; overflow-y: scroll; margin: 20px; padding: 15px; border: 1px solid #ccc; border-radius: 10px;">
        <canvas id="customerChart" style="width: 1325px; height: auto"></canvas>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js@4.0.1"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0"></script>

<script>
    const ApplicationStatusCode = {
        185: 'ApplicationReceived',
        190: 'IncompleteApplication',
        195: 'LNVerificationFailed',
        200: 'LNVerified',
        205: 'CallPending',
        210: 'WaitingForDocuments',
        211: 'WorkDetailsCompleted',
        212: 'PersonalDetailsCompleted',
        213: 'IncomeDetailsCompleted',
        214: 'BankDetailsCompleted',
        215: 'OnlineCustomerInSupervisorRequest',
        216: 'Archive',
        217: 'OnlineInReview',
        218: 'OnlineInSupervisorReview',
        219: 'DocumentCompleted',
        220: 'AccountCreated',
        230: 'NeedMoreInfo',
        240: 'SendToStore',
        250: 'VANeedMoreInfo',
        260: 'LNAuthFailed',
        270: 'LNAuthSuccess',
        280: 'DebitCardDetailsCompleted',
        290: 'InVerification',
        300: 'Declined',
        310: 'Withdrawn',
        320: 'ApprovedPendingSignature',
        330: 'Originated',
        340: 'AutoWithdrawal',
        350: 'LoanClose',
        501: 'FSVerificationAccepted',
        502: 'RBLVerificationAccepted',
        503: 'RBLVerificationDeclined',
        504: 'RBLLoanInitiated',
        505: 'RBLAgreementsAccepted',
        506: 'RBLLoanDisbursed',
        507: 'RBLLoanClosed'
    };

    const CustomerStatusCode = {
        10: 'Active',
        20: 'InActive',
        30: 'InVerification',
        40: 'Accepted',
        50: 'AgentNotAssigned',
        60: 'NotAccepted',
        70: 'RequestToSupervisor',
        80: 'Bankrupt',
        90: 'Deceased',
        100: 'Ageing',
        110: 'Blocked',
        120: 'NeedMoreInfo',
        130: 'VerificationInProcess',
        140: 'VerificationDiscard',
        150: 'NeedMoreInfoSupervisor',
        160: 'AssignToAgent',
        170: 'InfoRespondedToAgent',
        180: 'InfoRespondedToSupervisor',
        185: 'ApplicationReceived',
        190: 'IncompleteApplication',
        195: 'LNVerificationFailed',
        200: 'LNVerified',
        205: 'CallPending',
        210: 'WaitingForDocuments',
        211: 'WorkDetailsCompleted',
        212: 'PersonalDetailsCompleted',
        213: 'IncomeDetailsCompleted',
        214: 'BankDetailsCompleted',
        215: 'OnlineCustomerInSupervisorRequest',
        216: 'Archive',
        217: 'OnlineInReview',
        218: 'OnlineInSupervisorReview'
    };

    const customers = @Html.Raw(Json.Serialize(Model));
    console.log(customers);
    const firstInsertedDate = new Date(customers[0].details[0].insertedDate);
    const minTime = firstInsertedDate; // Start from the first inserted date
    const maxTime = new Date(minTime.getTime() + 60 * 60 * 1000); // Add one hour to the min time

    // Find the earliest and latest dates
    let earliestDate = new Date(customers[0].details[0].insertedDate);
    let latestDate = new Date(customers[0].details[0].insertedDate);
    customers.forEach(customer => {
        customer.details.forEach(detail => {
            const date = new Date(detail.insertedDate);
            if (date < earliestDate) earliestDate = date;
            if (date > latestDate) latestDate = date;
        });
    });

    // Prepare the data for Chart.js
    const chartData = {
        datasets: customers.map(customer => ({
            label: `Customer ${customer.customerId}`,
            data: customer.details.map(detail => ({
                x: new Date(detail.insertedDate),
                y: customer.customerId,
                applicationStatus: ApplicationStatusCode[detail.applicationStatusCode],
                customerStatus: CustomerStatusCode[detail.customerStatusCode],
                color: detail.color 
            })),
            showLine: true,
            fill: false,
            pointBackgroundColor: customer.details.map(detail => detail.color), 
            pointBorderColor: customer.details.map(detail => detail.color),
            segment: {
                borderColor: (ctx) => {
                    if (ctx.p0DataIndex === undefined || ctx.p1DataIndex === undefined) {
                        return '#000000'; 
                    }

                    const datasetIndex = ctx.datasetIndex;
                    const pointIndex = ctx.p1DataIndex; 

                    const color = chartData.datasets[datasetIndex].data[pointIndex].color;
                    return color || '#000000';
                }
            },
            borderWidth: 1
        }))
    };

    const ctx = document.getElementById('customerChart').getContext('2d');
    const customerChart = new Chart(ctx, {
        type: 'line',
        data: chartData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'minute',
                        tooltipFormat: 'hh:mm a',
                        displayFormats: {
                            minute: 'hh:mm a'
                        },
                        min: minTime, // Set to one hour ago
                        max: maxTime // Current time
                    },
                    title: {
                        display: true,
                        text: 'Time'
                    },
                    ticks: {
                        autoSkip: true, 
                        maxTicksLimit: 25, 
                        major: {
                            enabled: true 
                        }
                    },
                    grid: {
                        display: true,
                        drawOnChartArea: true
                    }
                },
                y: {
                    type: 'category',
                    labels: customers.map(c => c.customerId),
                    title: {
                        display: true,
                        text: 'Customer ID'
                    },
                    ticks: {
                        autoSkip: false, // Ensures no session ID is skipped
                        maxTicksLimit: 20, // Limits the number of ticks shown to prevent overcrowding
                        padding: 10, // Adds space between ticks
                    },
                    gridLines: {
                        display: true,
                        drawBorder: false,
                    }
                }
            },
            plugins: {
                legend : {
                    display : false
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            const dataPoint = context.raw;
                            return [
                                `Inserted: ${dataPoint.x.toLocaleString()}`,
                                `App Status: ${dataPoint.applicationStatus}`,
                                `Cust Status: ${dataPoint.customerStatus}`
                            ];
                        }
                    }
                }
            }
        }
    });

</script>