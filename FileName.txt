public enum ApplicationStatusCode
    {
        ApplicationReceived = 185,
        IncompleteApplication = 190,
        LNVerificationFailed = 195,
        LNVerified = 200,
        CallPending = 205,
        WaitingForDocuments = 210,
        WorkDetailsCompleted = 211,
        PersonalDetailsCompleted = 212,
        IncomeDetailsCompleted = 213,
        BankDetailsCompleted = 214,
        OnlineCustomerInSupervisorRequest = 215,
        Archive = 216,
        OnlineInReview = 217,
        OnlineInSupervisorReview = 218,
        DocumentCompleted = 219,
        AccountCreated = 220,
        NeedMoreInfo = 230,
        SendToStore = 240,
        VANeedMoreInfo = 250,
        LNAuthFailed = 260,
        LNAuthSuccess = 270,
        DebitCardDetailsCompleted = 280,
        InVerification = 290,
        Declined = 300,
        ApprovedPendingSignature = 320,
        Withdrawn = 310,
        Originated = 330,
        AutoWithdrawal = 340,
        LoanClose = 350,
        FSVerificationAccepted = 501,
        RBLVerificationAccepted = 502,
        RBLVerificationDeclined = 503,
        RBLLoanInitiated = 504,
        RBLAgreementsAccepted = 505,
        RBLLoanDisbursed = 506,
        RBLLoanClosed = 507
    }

    public enum CustomerStatusCode : short
    {
        Active = 10,
        InActive = 20,
        InVerification = 30,
        Accepted = 40,
        AgentNotAssigned = 50,
      NotAccepted = 60,
      RequestToSupervisor = 70,
      Bankrupt = 80,
      Deceased = 90,
      Ageing = 100,
      Blocked = 110,
      NeedMoreInfo = 120,
      VerificationInProcess = 130,
      VerificationDiscard = 140,
      NeedMoreInfoSupervisor = 150,
      AssignToAgent = 160,
      InfoRespondedToAgent = 170,
      InfoRespondedToSupervisor = 180,
      ApplicationReceived = 185,
      IncompleteApplication = 190,
        LNVerificationFailed = 195,
        LNVerified = 200,
        CallPending = 205,
        WaitingForDocuments = 210,
        WorkDetailsCompleted = 211,
        PersonalDetailsCompleted = 212,
        IncomeDetailsCompleted = 213,
        BankDetailsCompleted = 214,
        OnlineCustomerInSupervisorRequest = 215,
        Archive = 216,
        OnlineInReview = 217,
        OnlineInSupervisorReview = 218,
    //}




    /* public async Task<List<int>> getFirstandLastIDs()
       {
           var currentDateMinusHours = 0;
           var Ids = new List<int>();
           string query1 = @$"DECLARE @EndDate DATETIME;
                               DECLARE @StartDate DATETIME;

                               SET @EndDate = DATEADD(HOUR, -{currentDateMinusHours}, GETDATE());
                               SET @StartDate = DATEADD(HOUR, -1, @EndDate);

                               SELECT 
                                   MIN(CustomerHistoryID) AS EarliestCustomerHistoryID,
                                   MAX(CustomerHistoryID) AS LatestCustomerHistoryID
                               FROM 
                                   CustomerHistory
                               WHERE 
                                   InsertedDate BETWEEN @StartDate AND @EndDate;
           ";
           using (SqlConnection connection = new SqlConnection(_connectionString))
           {
               SqlCommand cmd = new SqlCommand(query1, connection);
               connection.Open();
               cmd.CommandTimeout = 120;
               using (SqlDataReader reader = cmd.ExecuteReader())
               {
                   while (reader.Read())
                   {
                       if (!reader.IsDBNull(0))
                       {
                           Ids.Add(reader.GetInt32(0));
                       }
                       else
                       {
                           Console.WriteLine("No data is present at the time of given duartion So the last one hour data of the displayed");
                           Ids = await GetTableLastOneHourData();
                           break;
                       }

                       if (!reader.IsDBNull(1))
                       {
                           Ids.Add(reader.GetInt32(1));
                       }
                   }
               }
           }

           return Ids;
       } */
        /*public async Task<List<int>> GetTableLastOneHourData()
            {
                var IDs = new List<int>();
                string query1 = @"
                DECLARE @LastInsertedDate DATETIME;
                DECLARE @OneHourAgo DATETIME;
                SET @LastInsertedDate = (SELECT MAX(InsertedDate) FROM CustomerHistory);
                SET @OneHourAgo = DATEADD(HOUR, -1, @LastInsertedDate);

                SELECT 
                    MIN(CustomerHistoryID) AS EarliestCustomerHistoryID,
                    MAX(CustomerHistoryID) AS LatestCustomerHistoryID
                FROM 
                    CustomerHistory
                WHERE 
                    InsertedDate BETWEEN @OneHoueAgo AND @LastInsertedDate;
                ";
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    SqlCommand cmd = new SqlCommand(query1, connection);
                    connection.Open();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(0))
                            {
                                IDs.Add(reader.GetInt32(0));
                            }
                            if (!reader.IsDBNull(1))
                            {
                                IDs.Add(reader.GetInt32(1));
                            }
                        }
                    }
                }
                return IDs;
            }*/




     public async Task<List<int>> getCustomerIds(List<int> Ids)
        {
            var customerIds = new List<int>();
            string query = @"
                    SELECT DISTINCT CustomerID
                    FROM CustomerHistory
                    WHERE CustomerHistoryID >= @StartId AND CustomerHistoryID <= @EndId;
            ";

            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@StartId", Ids[0]);
                    command.Parameters.AddWithValue("@EndId", Ids[1]);
                    connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            int customerId = reader.GetInt32(0);
                            customerIds.Add(customerId);
                        }
                    }
                };
            }
            foreach(var id in customerIds)
            {
                Console.WriteLine(id);
            }
            return customerIds;
        }