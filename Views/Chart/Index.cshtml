@using CustomerStatus.Model;
@model List<Customer>;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customer Status</h2>

<div style="height: 80vh;">
    <canvas id="customerChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.0.1"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0"></script>

<script>
    const ApplicationStatusCode = {
        185: 'ApplicationReceived',
        190: 'IncompleteApplication',
        195: 'LNVerificationFailed',
        200: 'LNVerified',
        205: 'CallPending',
        210: 'WaitingForDocuments',
        211: 'WorkDetailsCompleted',
        212: 'PersonalDetailsCompleted',
        213: 'IncomeDetailsCompleted',
        214: 'BankDetailsCompleted',
        215: 'OnlineCustomerInSupervisorRequest',
        216: 'Archive',
        217: 'OnlineInReview',
        218: 'OnlineInSupervisorReview',
        219: 'DocumentCompleted',
        220: 'AccountCreated',
        230: 'NeedMoreInfo',
        240: 'SendToStore',
        250: 'VANeedMoreInfo',
        260: 'LNAuthFailed',
        270: 'LNAuthSuccess',
        280: 'DebitCardDetailsCompleted',
        290: 'InVerification',
        300: 'Declined',
        310: 'Withdrawn',
        320: 'ApprovedPendingSignature',
        330: 'Originated',
        340: 'AutoWithdrawal',
        350: 'LoanClose',
        501: 'FSVerificationAccepted',
        502: 'RBLVerificationAccepted',
        503: 'RBLVerificationDeclined',
        504: 'RBLLoanInitiated',
        505: 'RBLAgreementsAccepted',
        506: 'RBLLoanDisbursed',
        507: 'RBLLoanClosed'
    };

    const CustomerStatusCode = {
        10: 'Active',
        20: 'InActive',
        30: 'InVerification',
        40: 'Accepted',
        50: 'AgentNotAssigned',
        60: 'NotAccepted',
        70: 'RequestToSupervisor',
        80: 'Bankrupt',
        90: 'Deceased',
        100: 'Ageing',
        110: 'Blocked',
        120: 'NeedMoreInfo',
        130: 'VerificationInProcess',
        140: 'VerificationDiscard',
        150: 'NeedMoreInfoSupervisor',
        160: 'AssignToAgent',
        170: 'InfoRespondedToAgent',
        180: 'InfoRespondedToSupervisor',
        185: 'ApplicationReceived',
        190: 'IncompleteApplication',
        195: 'LNVerificationFailed',
        200: 'LNVerified',
        205: 'CallPending',
        210: 'WaitingForDocuments',
        211: 'WorkDetailsCompleted',
        212: 'PersonalDetailsCompleted',
        213: 'IncomeDetailsCompleted',
        214: 'BankDetailsCompleted',
        215: 'OnlineCustomerInSupervisorRequest',
        216: 'Archive',
        217: 'OnlineInReview',
        218: 'OnlineInSupervisorReview'
    };

    const customers = @Html.Raw(Json.Serialize(Model));
    console.log(customers);

    // Find the earliest and latest dates
    let earliestDate = new Date(customers[0].details[0].insertedDate);
    let latestDate = new Date(customers[0].details[0].insertedDate);
    customers.forEach(customer => {
        customer.details.forEach(detail => {
            const date = new Date(detail.insertedDate);
            if (date < earliestDate) earliestDate = date;
            if (date > latestDate) latestDate = date;
        });
    });

    // Prepare the data for Chart.js
    const chartData = {
        datasets: customers.map(customer => ({
            label: `Customer ${customer.customerId}`,
            data: customer.details.map(detail => ({
                x: new Date(detail.insertedDate),
                y: customer.customerId,
                applicationStatusCode: ApplicationStatusCode[detail.applicationStatusCode],
                customerStatusCode: CustomerStatusCode[detail.customerStatusCode],
                backgroundColor: detail.color,
                borderColor: detail.color
            })),
            showLine: true,
            fill: false,
            segment: {
                borderColor: (ctx) => {
                    const index = ctx.p0DataIndex; // Current point index
                    const nextIndex = ctx.p1DataIndex; // Next point index

                    if (nextIndex === undefined) {
                        // If it's the last point, set the line to black
                        return '#000000';
                    }

                    // Use the color of the next point
                    return customer.details[nextIndex].color;
                }
            },
            borderWidth: 1 // Thickness of the line
        }))
    };

    const ctx = document.getElementById('customerChart').getContext('2d');
    const customerChart = new Chart(ctx, {
        type: 'line',
        data: chartData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'minute',
                        tooltipFormat: 'hh:mm a',
                        displayFormats: {
                            minute: 'hh:mm a'
                        }
                    },
                    title: {
                        display: true,
                        text: 'Time'
                    },
                    ticks: {
                        autoSkip: true, 
                        maxTicksLimit: 25, 
                        major: {
                            enabled: true 
                        }
                    },
                    grid: {
                        display: true,
                        drawOnChartArea: true
                    }
                },
                y: {
                    type: 'category',
                    labels: customers.map(c => c.customerId),
                    title: {
                        display: true,
                        text: 'Customer ID'
                    },
                    ticks: {
                        autoSkip: false  // Ensure all labels are shown
                    }
                }
            },
            plugins: {
                legend : {
                    display : false
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            const dataPoint = context.raw;
                            return [
                                `Inserted: ${dataPoint.x.toLocaleString()}`,
                                `App Status: ${dataPoint.applicationStatusCode}`,
                                `Cust Status: ${dataPoint.customerStatusCode}`
                            ];
                        }
                    }
                }
            }
        }
    });

    // Function to generate random colors
</script>